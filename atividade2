lista1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lista2 = [1, 3, 7, 9, 11, 23, 25]

# 1. Escreva uma função que receba uma lista de números e retorne outra lista com os números ímpares.

def impares(lista):
    impares = [i for i in lista1 if i % 2 != 0]
    return impares

print("Números ímpares: ", impares(lista1))

# 2. Escreva uma função que receba uma lista de números e retorne outra lista com os números primos presentes.

def primos(lista):
    primos = [n for n in lista1 if all(n % i != 0 for i in range(2, int(n**0.5) + 1))]
    return(primos)

print("Números primos: ", primos(lista1))

# 3. Escreva uma função que receba duas listas e retorne outra lista com os elementos que estão presentes em apenas uma das listas.

def unicos(lista1, lista2):

    conjunto1 = set(lista1)
    conjunto2 = set(lista2)
    
    unicos = list(conjunto1.symmetric_difference(conjunto2))
    
    return unicos

print("Elementos únicos: ", unicos(lista1, lista2))

# 4. Dada uma lista de números inteiros, escreva uma função para encontrar o segundo maior valor na lista.

def segundo_maior(lista1):

    ranking = sorted(lista1, reverse=True)
    
    if len(ranking) >= 2:
        return ranking[1]

print("Segundo maior valor na lista 1: ", segundo_maior(lista1))


# 5. Crie uma função que receba uma lista de tuplas, cada uma contendo o nome e a idade de uma pessoa, e retorne a lista ordenada pelo nome das pessoas em ordem alfabética.

tupla = [("Mariana", 12), ("Victor", 11), ("Jaqueline", 13), ("Fernando", 16)]

def nomes(tupla):
    tupla_ordenada = sorted(tupla, key=lambda tupla: tupla[0])
    for nome, idade in tupla_ordenada:
        print(f"Nome: {nome}, Idade: {idade}")

nomes(tupla)


# 6. Observe os espaços sublinhados e complete o código.

import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(5.5, 3.5), layout="constrained")

for row in range(2):
    for col in range(2):
        axs[row, col].annotate(f'axs[{row}, {col}]', (0.5, 0.5),
        transform=axs[row, col].transAxes,
        ha='center', va='center', fontsize=18,
        color='darkgrey')
        
fig.suptitle(plt.subplots())

# 7. Observe os espaços sublinhados e complete o código.

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
x = np.linspace(-2 * np.pi, 2 * np.pi, 100)
y = np.sin(x)
fig, ax = plt.subplots()
ax.plot(x,y)


# 8. Utilizando pandas, como realizar a leitura de um arquivo CSV em um DataFrame e exibir as primeiras linhas?

import pandas as pd
df = pd.read_csv('dataframe.csv')
df.head()

# 9. Utilizando pandas, como selecionar uma coluna específica e filtrar linhas em um “DataFrame” com base em uma condição?

#filtrar linha onde os elementos são maiores que 10
maiorque10 = df[df['coluna'] > 10]

#filtrar linha onde os elementos são iguais a 1
iguala1 = df[df['coluna'] == 1]


# 10. Utilizando pandas, como lidar com valores ausentes (NaN) em um DataFrame?

#verificando se há valores ausentes no dataframe
print(df.isna())

#verificando se há valores ausentes em uma coluna específica
print(df['coluna'].isna())

#possibilidade 1: eliminar os valores ausentes de uma linha ou coluna
df_cleaned_rows = df.dropna()

df_cleaned_cols = df.dropna(axis=1)

#possibilidade 2: preencher os valores com um valor específico, média, etc
df_filled = df.fillna(0)

media = df['coluna'].mean()
df_filled = df.fillna(media)

